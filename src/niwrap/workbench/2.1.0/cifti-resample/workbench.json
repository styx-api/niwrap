{
  "command": "-cifti-resample",
  "short_description": "RESAMPLE A CIFTI FILE TO A NEW CIFTI SPACE",
  "help_text": "Resample cifti data to a different brainordinate space.  Use COLUMN for the direction to resample dscalar, dlabel, or dtseries.  Resampling both dimensions of a dconn requires running this command twice, once with COLUMN and once with ROW.  If you are resampling a dconn and your machine has a large amount of memory, you might consider using -cifti-resample-dconn-memory to avoid writing and rereading an intermediate file.  The <template-direction> argument should usually be COLUMN, as dtseries, dscalar, and dlabel all have brainordinates on that direction.  If spheres are not specified for a surface structure which exists in the cifti files, its data is copied without resampling or dilation.  Dilation is done with the 'nearest' method, and is done on <new-sphere> for surface data.  Volume components are padded before dilation so that dilation doesn't run into the edge of the component bounding box.  If neither -affine nor -warpfield are specified, the identity transform is assumed for the volume data.\n\nThe recommended resampling methods are ADAP_BARY_AREA and CUBIC (cubic spline), except for label data which should use ADAP_BARY_AREA and ENCLOSING_VOXEL.  Using ADAP_BARY_AREA requires specifying an area option to each used -*-spheres option.\n\nThe <volume-method> argument must be one of the following:\n\nCUBIC\nENCLOSING_VOXEL\nTRILINEAR\n\nThe <surface-method> argument must be one of the following:\n\nADAP_BARY_AREA\nBARYCENTRIC\n",
  "version_info": [
     "Connectome Workbench",
     "Type: Command Line Application",
     "Version: 2.1.0",
     "Qt Compiled Version: 5.15.3",
     "Qt Runtime Version: 5.15.3",
     "Commit: unknown",
     "Commit Date: unknown",
     "Compiler: c++ (/usr/bin)",
     "Compiler Version: 11.4.0",
     "Compiled Debug: NO",
     "Operating System: Linux",
     "Compiled with OpenMP: YES"
  ],
  "params": [
    {
      "key": 1,
      "short_name": "cifti-in",
      "description": "the cifti file to resample",
      "type": "Cifti File"
    },
    {
      "key": 2,
      "short_name": "direction",
      "description": "the direction of the input that should be resampled, ROW or COLUMN",
      "type": "String"
    },
    {
      "key": 3,
      "short_name": "cifti-template",
      "description": "a cifti file containing the cifti space to resample to",
      "type": "Cifti File"
    },
    {
      "key": 4,
      "short_name": "template-direction",
      "description": "the direction of the template to use as the resampling space, ROW or COLUMN",
      "type": "String"
    },
    {
      "key": 5,
      "short_name": "surface-method",
      "description": "specify a surface resampling method",
      "type": "String"
    },
    {
      "key": 6,
      "short_name": "volume-method",
      "description": "specify a volume interpolation method",
      "type": "String"
    }
  ],
  "outputs": [
    {
      "key": 7,
      "short_name": "cifti-out",
      "description": "the output cifti file",
      "type": "Cifti File"
    }
  ],
  "options": [
    {
      "key": 8,
      "option_switch": "-surface-largest",
      "description": "use largest weight instead of weighted average or popularity when doing surface resampling",
      "params": [
      ],
      "outputs": [
      ],
      "options": [
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 9,
      "option_switch": "-volume-predilate",
      "description": "dilate the volume components before resampling",
      "params": [
        {
          "key": 1,
          "short_name": "dilate-mm",
          "description": "distance, in mm, to dilate",
          "type": "Floating Point"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 2,
          "option_switch": "-nearest",
          "description": "use nearest value dilation",
          "params": [
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        },
        {
          "key": 3,
          "option_switch": "-weighted",
          "description": "use weighted dilation (default)",
          "params": [
          ],
          "outputs": [
          ],
          "options": [
            {
              "key": 1,
              "option_switch": "-exponent",
              "description": "specify exponent in weighting function",
              "params": [
                {
                  "key": 1,
                  "short_name": "exponent",
                  "description": "exponent 'n' to use in (1 / (distance ^ n)) as the weighting function (default 7)",
                  "type": "Floating Point"
                }
              ],
              "outputs": [
              ],
              "options": [
              ],
              "repeatable_options": [
              ]
            },
            {
              "key": 2,
              "option_switch": "-legacy-cutoff",
              "description": "use v1.3.2 logic for the kernel cutoff",
              "params": [
              ],
              "outputs": [
              ],
              "options": [
              ],
              "repeatable_options": [
              ]
            }
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 10,
      "option_switch": "-surface-postdilate",
      "description": "dilate the surface components after resampling",
      "params": [
        {
          "key": 1,
          "short_name": "dilate-mm",
          "description": "distance, in mm, to dilate",
          "type": "Floating Point"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 2,
          "option_switch": "-nearest",
          "description": "use nearest value dilation",
          "params": [
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        },
        {
          "key": 3,
          "option_switch": "-linear",
          "description": "use linear dilation",
          "params": [
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        },
        {
          "key": 4,
          "option_switch": "-weighted",
          "description": "use weighted dilation (default for non-label data)",
          "params": [
          ],
          "outputs": [
          ],
          "options": [
            {
              "key": 1,
              "option_switch": "-exponent",
              "description": "specify exponent in weighting function",
              "params": [
                {
                  "key": 1,
                  "short_name": "exponent",
                  "description": "exponent 'n' to use in (area / (distance ^ n)) as the weighting function (default 6)",
                  "type": "Floating Point"
                }
              ],
              "outputs": [
              ],
              "options": [
              ],
              "repeatable_options": [
              ]
            },
            {
              "key": 2,
              "option_switch": "-legacy-cutoff",
              "description": "use v1.3.2 logic for the kernel cutoff",
              "params": [
              ],
              "outputs": [
              ],
              "options": [
              ],
              "repeatable_options": [
              ]
            }
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 11,
      "option_switch": "-affine",
      "description": "use an affine transformation on the volume components",
      "params": [
        {
          "key": 1,
          "short_name": "affine-file",
          "description": "the affine file to use",
          "type": "String"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 2,
          "option_switch": "-flirt",
          "description": "MUST be used if affine is a flirt affine",
          "params": [
            {
              "key": 1,
              "short_name": "source-volume",
              "description": "the source volume used when generating the affine",
              "type": "String"
            },
            {
              "key": 2,
              "short_name": "target-volume",
              "description": "the target volume used when generating the affine",
              "type": "String"
            }
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 12,
      "option_switch": "-warpfield",
      "description": "use a warpfield on the volume components",
      "params": [
        {
          "key": 1,
          "short_name": "warpfield",
          "description": "the warpfield to use",
          "type": "String"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 2,
          "option_switch": "-fnirt",
          "description": "MUST be used if using a fnirt warpfield",
          "params": [
            {
              "key": 1,
              "short_name": "source-volume",
              "description": "the source volume used when generating the warpfield",
              "type": "String"
            }
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 13,
      "option_switch": "-left-spheres",
      "description": "specify spheres for left surface resampling",
      "params": [
        {
          "key": 1,
          "short_name": "current-sphere",
          "description": "a sphere with the same mesh as the current left surface",
          "type": "Surface File"
        },
        {
          "key": 2,
          "short_name": "new-sphere",
          "description": "a sphere with the new left mesh that is in register with the current sphere",
          "type": "Surface File"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 3,
          "option_switch": "-left-area-surfs",
          "description": "specify left surfaces to do vertex area correction based on",
          "params": [
            {
              "key": 1,
              "short_name": "current-area",
              "description": "a relevant left anatomical surface with current mesh",
              "type": "Surface File"
            },
            {
              "key": 2,
              "short_name": "new-area",
              "description": "a relevant left anatomical surface with new mesh",
              "type": "Surface File"
            }
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        },
        {
          "key": 4,
          "option_switch": "-left-area-metrics",
          "description": "specify left vertex area metrics to do area correction based on",
          "params": [
            {
              "key": 1,
              "short_name": "current-area",
              "description": "a metric file with vertex areas for the current mesh",
              "type": "Metric File"
            },
            {
              "key": 2,
              "short_name": "new-area",
              "description": "a metric file with vertex areas for the new mesh",
              "type": "Metric File"
            }
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 14,
      "option_switch": "-right-spheres",
      "description": "specify spheres for right surface resampling",
      "params": [
        {
          "key": 1,
          "short_name": "current-sphere",
          "description": "a sphere with the same mesh as the current right surface",
          "type": "Surface File"
        },
        {
          "key": 2,
          "short_name": "new-sphere",
          "description": "a sphere with the new right mesh that is in register with the current sphere",
          "type": "Surface File"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 3,
          "option_switch": "-right-area-surfs",
          "description": "specify right surfaces to do vertex area correction based on",
          "params": [
            {
              "key": 1,
              "short_name": "current-area",
              "description": "a relevant right anatomical surface with current mesh",
              "type": "Surface File"
            },
            {
              "key": 2,
              "short_name": "new-area",
              "description": "a relevant right anatomical surface with new mesh",
              "type": "Surface File"
            }
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        },
        {
          "key": 4,
          "option_switch": "-right-area-metrics",
          "description": "specify right vertex area metrics to do area correction based on",
          "params": [
            {
              "key": 1,
              "short_name": "current-area",
              "description": "a metric file with vertex areas for the current mesh",
              "type": "Metric File"
            },
            {
              "key": 2,
              "short_name": "new-area",
              "description": "a metric file with vertex areas for the new mesh",
              "type": "Metric File"
            }
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 15,
      "option_switch": "-cerebellum-spheres",
      "description": "specify spheres for cerebellum surface resampling",
      "params": [
        {
          "key": 1,
          "short_name": "current-sphere",
          "description": "a sphere with the same mesh as the current cerebellum surface",
          "type": "Surface File"
        },
        {
          "key": 2,
          "short_name": "new-sphere",
          "description": "a sphere with the new cerebellum mesh that is in register with the current sphere",
          "type": "Surface File"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 3,
          "option_switch": "-cerebellum-area-surfs",
          "description": "specify cerebellum surfaces to do vertex area correction based on",
          "params": [
            {
              "key": 1,
              "short_name": "current-area",
              "description": "a relevant cerebellum anatomical surface with current mesh",
              "type": "Surface File"
            },
            {
              "key": 2,
              "short_name": "new-area",
              "description": "a relevant cerebellum anatomical surface with new mesh",
              "type": "Surface File"
            }
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        },
        {
          "key": 4,
          "option_switch": "-cerebellum-area-metrics",
          "description": "specify cerebellum vertex area metrics to do area correction based on",
          "params": [
            {
              "key": 1,
              "short_name": "current-area",
              "description": "a metric file with vertex areas for the current mesh",
              "type": "Metric File"
            },
            {
              "key": 2,
              "short_name": "new-area",
              "description": "a metric file with vertex areas for the new mesh",
              "type": "Metric File"
            }
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    }
  ],
  "repeatable_options": [
  ]
}

