{
  "command": "-cifti-create-dense-from-template",
  "short_description": "CREATE CIFTI WITH MATCHING DENSE MAP",
  "help_text": "This command helps you make a new dscalar, dtseries, or dlabel cifti file that matches the brainordinate space used in another cifti file.  The template file must have the desired brainordinate space in the mapping along the column direction (for dtseries, dscalar, dlabel, and symmetric dconn this is always the case).  All input cifti files must have a brain models mapping along column and use the same volume space and/or surface vertex count as the template for structures that they contain.  If any input files contain label data, then input files with non-label data are not allowed, and the -series option may not be used.\n\nAny structure that isn't covered by an input is filled with zeros or the unlabeled key.\n\nThe <structure> argument of -metric, -label or -volume must be one of the following:\n\nCORTEX_LEFT\nCORTEX_RIGHT\nCEREBELLUM\nACCUMBENS_LEFT\nACCUMBENS_RIGHT\nALL_GREY_MATTER\nALL_WHITE_MATTER\nAMYGDALA_LEFT\nAMYGDALA_RIGHT\nBRAIN_STEM\nCAUDATE_LEFT\nCAUDATE_RIGHT\nCEREBELLAR_WHITE_MATTER_LEFT\nCEREBELLAR_WHITE_MATTER_RIGHT\nCEREBELLUM_LEFT\nCEREBELLUM_RIGHT\nCEREBRAL_WHITE_MATTER_LEFT\nCEREBRAL_WHITE_MATTER_RIGHT\nCORTEX\nDIENCEPHALON_VENTRAL_LEFT\nDIENCEPHALON_VENTRAL_RIGHT\nHIPPOCAMPUS_LEFT\nHIPPOCAMPUS_RIGHT\nHIPPOCAMPUS_DENTATE_LEFT\nHIPPOCAMPUS_DENTATE_RIGHT\nINVALID\nOTHER\nOTHER_GREY_MATTER\nOTHER_WHITE_MATTER\nPALLIDUM_LEFT\nPALLIDUM_RIGHT\nPUTAMEN_LEFT\nPUTAMEN_RIGHT\nTHALAMUS_LEFT\nTHALAMUS_RIGHT\n\nThe argument to -unit must be one of the following:\n\nSECOND\nHERTZ\nMETER\nRADIAN",
  "version_info": [
     "Connectome Workbench",
     "Type: Command Line Application",
     "Version: 2.1.0",
     "Qt Compiled Version: 5.15.3",
     "Qt Runtime Version: 5.15.3",
     "Commit: unknown",
     "Commit Date: unknown",
     "Compiler: c++ (/usr/bin)",
     "Compiler Version: 11.4.0",
     "Compiled Debug: NO",
     "Operating System: Linux",
     "Compiled with OpenMP: YES"
  ],
  "params": [
    {
      "key": 1,
      "short_name": "template-cifti",
      "description": "file to match brainordinates of",
      "type": "Cifti File"
    }
  ],
  "outputs": [
    {
      "key": 2,
      "short_name": "cifti-out",
      "description": "the output cifti file",
      "type": "Cifti File"
    }
  ],
  "options": [
    {
      "key": 3,
      "option_switch": "-series",
      "description": "make a dtseries file instead of a dscalar",
      "params": [
        {
          "key": 1,
          "short_name": "step",
          "description": "increment between series points",
          "type": "Floating Point"
        },
        {
          "key": 2,
          "short_name": "start",
          "description": "start value of the series",
          "type": "Floating Point"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 3,
          "option_switch": "-unit",
          "description": "select unit for series (default SECOND)",
          "params": [
            {
              "key": 1,
              "short_name": "unit",
              "description": "unit identifier",
              "type": "String"
            }
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 4,
      "option_switch": "-volume-all",
      "description": "specify an input volume file for all voxel data",
      "params": [
        {
          "key": 1,
          "short_name": "volume-in",
          "description": "the input volume file",
          "type": "Volume File"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 2,
          "option_switch": "-from-cropped",
          "description": "the input is cropped to the size of the voxel data in the template file",
          "params": [
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 9,
      "option_switch": "-label-collision",
      "description": "how to handle conflicts between label keys",
      "params": [
        {
          "key": 1,
          "short_name": "action",
          "description": "'ERROR', 'SURFACES_FIRST', or 'LEGACY', default 'ERROR', use 'LEGACY' to match v1.4.2 and earlier",
          "type": "String"
        }
      ],
      "outputs": [
      ],
      "options": [
      ],
      "repeatable_options": [
      ]
    }
  ],
  "repeatable_options": [
    {
      "key": 5,
      "option_switch": "-cifti",
      "description": "use input data from a cifti file",
      "params": [
        {
          "key": 1,
          "short_name": "cifti-in",
          "description": "cifti file containing input data",
          "type": "Cifti File"
        }
      ],
      "outputs": [
      ],
      "options": [
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 6,
      "option_switch": "-metric",
      "description": "use input data from a metric file",
      "params": [
        {
          "key": 1,
          "short_name": "structure",
          "description": "which structure to put the metric file into",
          "type": "String"
        },
        {
          "key": 2,
          "short_name": "metric-in",
          "description": "input metric file",
          "type": "Metric File"
        }
      ],
      "outputs": [
      ],
      "options": [
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 7,
      "option_switch": "-label",
      "description": "use input data from surface label files",
      "params": [
        {
          "key": 1,
          "short_name": "structure",
          "description": "which structure to put the label file into",
          "type": "String"
        },
        {
          "key": 2,
          "short_name": "label-in",
          "description": "input label file",
          "type": "Label File"
        }
      ],
      "outputs": [
      ],
      "options": [
      ],
      "repeatable_options": [
      ]
    },
    {
      "key": 8,
      "option_switch": "-volume",
      "description": "use a volume file for a single volume structure's data",
      "params": [
        {
          "key": 1,
          "short_name": "structure",
          "description": "which structure to put the volume file into",
          "type": "String"
        },
        {
          "key": 2,
          "short_name": "volume-in",
          "description": "the input volume file",
          "type": "Volume File"
        }
      ],
      "outputs": [
      ],
      "options": [
        {
          "key": 3,
          "option_switch": "-from-cropped",
          "description": "the input is cropped to the size of the volume structure",
          "params": [
          ],
          "outputs": [
          ],
          "options": [
          ],
          "repeatable_options": [
          ]
        }
      ],
      "repeatable_options": [
      ]
    }
  ]
}

