{
  "tool-version": "7.4.1",
  "name": "mri_surf2surf",
  "author": "FreeSurfer Developers",
  "description": "Resample one surface onto another using FreeSurfer",
  "command-line": "mri_surf2surf [SRC_SUBJECT] [SVAL_PATH] [SVAL_XYZ] [PROJFRAC] [PROJABS] [SVAL_TAL_XYZ] [SVAL_AREA] [SVAL_ANNOT] [SVAL_NXYZ] [PATCH] [SFMT] [REG] [REG_INV] [SRCICOORDER] [TRG_SUBJECT] [TRGICOORDER] [TVAL_PATH] [TVAL_XYZ] [TFMT] [TRG_DIST] [S] [HEMI] [SRC_HEMI] [TRG_HEMI] [DUAL_HEMI] [JAC] [SURFREG] [SRC_SURFREG] [TRG_SURFREG] [MAPMETHOD] [FRAME] [FWHM_SRC] [FWHM_TRG] [NSMOOTH_IN] [NSMOOTH_OUT] [CORTEX] [NO_CORTEX] [LABEL_SRC] [LABEL_TRG] [MUL] [DIV] [RESHAPE] [RESHAPE_FACTOR] [RESHAPE3D] [SPLIT] [SYNTH] [ONES] [NORMVAR] [SEED] [PRUNE] [NO_PRUNE] [PROJ_SURF] [PROJ_NORM] [REG_DIFF] [RMS] [RMS_MASK]",
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "schema-version": "0.5",
  "inputs": [
    {
      "command-line-flag": "--srcsubject",
      "description": "Name of source subject as found in $SUBJECTS_DIR or ico for icosahedron.",
      "value-key": "[SRC_SUBJECT]",
      "type": "String",
      "optional": false,
      "id": "src_subject",
      "name": "Source Subject"
    },
    {
      "command-line-flag": "--sval",
      "description": "Path of the file with input values.",
      "value-key": "[SVAL_PATH]",
      "type": "File",
      "optional": true,
      "id": "sval_path",
      "name": "Source Value File"
    },
    {
      "command-line-flag": "--sval-xyz",
      "description": "Use xyz of a surface as input.",
      "value-key": "[SVAL_XYZ]",
      "type": "String",
      "optional": true,
      "id": "sval_xyz",
      "name": "Source Value XYZ Surface"
    },
    {
      "command-line-flag": "--projfrac",
      "description": "Use projected xyz of a surface as input.",
      "value-key": "[PROJFRAC]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "projfrac",
      "name": "Project Frac"
    },
    {
      "command-line-flag": "--projabs",
      "description": "Use projected xyz absolute of a surface as input.",
      "value-key": "[PROJABS]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "projabs",
      "name": "Project Absolute"
    },
    {
      "command-line-flag": "--sval-tal-xyz",
      "description": "Use tal xyz of a surface as input.",
      "value-key": "[SVAL_TAL_XYZ]",
      "type": "String",
      "optional": true,
      "id": "sval_tal_xyz",
      "name": "Source Value Tal XYZ Surface"
    },
    {
      "command-line-flag": "--sval-area",
      "description": "Use vertex area of a surface as input.",
      "value-key": "[SVAL_AREA]",
      "type": "String",
      "optional": true,
      "id": "sval_area",
      "name": "Source Value Area Surface"
    },
    {
      "command-line-flag": "--sval-annot",
      "description": "Map annotation file.",
      "value-key": "[SVAL_ANNOT]",
      "type": "File",
      "optional": true,
      "id": "sval_annot",
      "name": "Source Value Annot File"
    },
    {
      "command-line-flag": "--sval-nxyz",
      "description": "Use surface normals of a surface as input.",
      "value-key": "[SVAL_NXYZ]",
      "type": "String",
      "optional": true,
      "id": "sval_nxyz",
      "name": "Source Value NXyZ Surface"
    },
    {
      "command-line-flag": "--patch",
      "description": "Specify source patch file, target surface and number of dilations.",
      "value-key": "[PATCH]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "patch",
      "name": "Patch"
    },
    {
      "command-line-flag": "--sfmt",
      "description": "Source format type string.",
      "value-key": "[SFMT]",
      "type": "String",
      "optional": true,
      "id": "sfmt",
      "name": "Source Format"
    },
    {
      "command-line-flag": "--reg",
      "description": "Apply registration file to sval-xyz.",
      "value-key": "[REG]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "reg",
      "name": "Register"
    },
    {
      "command-line-flag": "--reg-inv",
      "description": "Apply inverse registration file to sval-xyz.",
      "value-key": "[REG_INV]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "reg_inv",
      "name": "Inverse Register"
    },
    {
      "command-line-flag": "--srcicoorder",
      "description": "Icosahedron order for the source.",
      "value-key": "[SRCICOORDER]",
      "type": "Number",
      "integer": true,
      "optional": true,
      "id": "srcicoorder",
      "name": "Source Ico Order"
    },
    {
      "command-line-flag": "--trgsubject",
      "description": "Name of target subject as found in $SUBJECTS_DIR or ico for icosahedron.",
      "value-key": "[TRG_SUBJECT]",
      "type": "String",
      "optional": false,
      "id": "trg_subject",
      "name": "Target Subject"
    },
    {
      "command-line-flag": "--trgicoorder",
      "description": "Icosahedron order for the target.",
      "value-key": "[TRGICOORDER]",
      "type": "Number",
      "integer": true,
      "optional": true,
      "id": "trgicoorder",
      "name": "Target Ico Order"
    },
    {
      "command-line-flag": "--tval",
      "description": "Path of the file in which to store output values.",
      "value-key": "[TVAL_PATH]",
      "type": "String",
      "optional": true,
      "id": "tval_path",
      "name": "Target Value File"
    },
    {
      "command-line-flag": "--tval-xyz",
      "description": "Save target value as a surface file with source xyz.",
      "value-key": "[TVAL_XYZ]",
      "type": "String",
      "optional": true,
      "id": "tval_xyz",
      "name": "Target Value XYZ Volume"
    },
    {
      "command-line-flag": "--tfmt",
      "description": "Target format type string.",
      "value-key": "[TFMT]",
      "type": "String",
      "optional": true,
      "id": "tfmt",
      "name": "Target Format"
    },
    {
      "command-line-flag": "--trgdist",
      "description": "Save distance from source to target vertices.",
      "value-key": "[TRG_DIST]",
      "type": "String",
      "optional": true,
      "id": "trg_dist",
      "name": "Target Distance File"
    },
    {
      "command-line-flag": "--s",
      "description": "Use the same subject for both source and target.",
      "value-key": "[S]",
      "type": "String",
      "optional": true,
      "id": "s",
      "name": "Single Subject"
    },
    {
      "command-line-flag": "--hemi",
      "description": "Hemisphere for both source and target (lh or rh).",
      "value-key": "[HEMI]",
      "type": "String",
      "optional": true,
      "id": "hemi",
      "name": "Hemisphere"
    },
    {
      "command-line-flag": "--srchemi",
      "description": "Hemisphere for source (lh or rh).",
      "value-key": "[SRC_HEMI]",
      "type": "String",
      "optional": true,
      "id": "src_hemi",
      "name": "Source Hemisphere"
    },
    {
      "command-line-flag": "--trghemi",
      "description": "Hemisphere for target (lh or rh).",
      "value-key": "[TRG_HEMI]",
      "type": "String",
      "optional": true,
      "id": "trg_hemi",
      "name": "Target Hemisphere"
    },
    {
      "command-line-flag": "--dual-hemi",
      "description": "Assume source ?h.?h.surfreg file name.",
      "value-key": "[DUAL_HEMI]",
      "type": "Flag",
      "id": "dual_hemi",
      "name": "Dual Hemisphere Flag"
    },
    {
      "command-line-flag": "--jac",
      "description": "Turn on jacobian correction, needed when applying to area or volume.",
      "value-key": "[JAC]",
      "type": "Flag",
      "id": "jac",
      "name": "Jacobian Correction Flag"
    },
    {
      "command-line-flag": "--surfreg",
      "description": "Surface registration for source and target (sphere.reg).",
      "value-key": "[SURFREG]",
      "type": "String",
      "optional": true,
      "id": "surfreg",
      "name": "Surface Registration"
    },
    {
      "command-line-flag": "--srcsurfreg",
      "description": "Source surface registration (sphere.reg).",
      "value-key": "[SRC_SURFREG]",
      "type": "String",
      "optional": true,
      "id": "src_surfreg",
      "name": "Source Surface Registration"
    },
    {
      "command-line-flag": "--trgsurfreg",
      "description": "Target surface registration (sphere.reg).",
      "value-key": "[TRG_SURFREG]",
      "type": "String",
      "optional": true,
      "id": "trg_surfreg",
      "name": "Target Surface Registration"
    },
    {
      "command-line-flag": "--mapmethod",
      "description": "Method used to map from the vertices in one subject to another (nnfr or nnf).",
      "value-key": "[MAPMETHOD]",
      "type": "String",
      "optional": true,
      "id": "mapmethod",
      "name": "Mapping Method"
    },
    {
      "command-line-flag": "--frame",
      "description": "Save only nth frame (when using paint output format).",
      "value-key": "[FRAME]",
      "type": "Number",
      "integer": true,
      "optional": true,
      "id": "frame",
      "name": "Frame Number"
    },
    {
      "command-line-flag": "--fwhm-src",
      "description": "Smooth the source to given FWHM.",
      "value-key": "[FWHM_SRC]",
      "type": "Number",
      "optional": true,
      "id": "fwhm_src",
      "name": "FWHM Source"
    },
    {
      "command-line-flag": "--fwhm-trg",
      "description": "Smooth the target to given FWHM.",
      "value-key": "[FWHM_TRG]",
      "type": "Number",
      "optional": true,
      "id": "fwhm_trg",
      "name": "FWHM Target"
    },
    {
      "command-line-flag": "--nsmooth-in",
      "description": "Number of smoothing iterations for input.",
      "value-key": "[NSMOOTH_IN]",
      "type": "Number",
      "integer": true,
      "optional": true,
      "id": "nsmooth_in",
      "name": "Input Smoothing Iterations"
    },
    {
      "command-line-flag": "--nsmooth-out",
      "description": "Number of smoothing iterations for output.",
      "value-key": "[NSMOOTH_OUT]",
      "type": "Number",
      "integer": true,
      "optional": true,
      "id": "nsmooth_out",
      "name": "Output Smoothing Iterations"
    },
    {
      "command-line-flag": "--cortex",
      "description": "Use ?h.cortex.label as a smoothing mask.",
      "value-key": "[CORTEX]",
      "type": "Flag",
      "id": "cortex",
      "name": "Cortex Flag"
    },
    {
      "command-line-flag": "--no-cortex",
      "description": "Do NOT use ?h.cortex.label as a smoothing mask (default).",
      "value-key": "[NO_CORTEX]",
      "type": "Flag",
      "id": "no_cortex",
      "name": "No Cortex Flag"
    },
    {
      "command-line-flag": "--label-src",
      "description": "Source smoothing mask.",
      "value-key": "[LABEL_SRC]",
      "type": "File",
      "optional": true,
      "id": "label_src",
      "name": "Label Source"
    },
    {
      "command-line-flag": "--label-trg",
      "description": "Target smoothing mask.",
      "value-key": "[LABEL_TRG]",
      "type": "File",
      "optional": true,
      "id": "label_trg",
      "name": "Label Target"
    },
    {
      "command-line-flag": "--mul",
      "description": "Multiply the input by the given value.",
      "value-key": "[MUL]",
      "type": "Number",
      "optional": true,
      "id": "mul",
      "name": "Multiply Input"
    },
    {
      "command-line-flag": "--div",
      "description": "Divide the input by the given value.",
      "value-key": "[DIV]",
      "type": "Number",
      "optional": true,
      "id": "div",
      "name": "Divide Input"
    },
    {
      "command-line-flag": "--reshape",
      "description": "Reshape output to multiple 'slices'.",
      "value-key": "[RESHAPE]",
      "type": "Flag",
      "id": "reshape",
      "name": "Reshape Flag"
    },
    {
      "command-line-flag": "--reshape-factor",
      "description": "Reshape to Nfactor 'slices'.",
      "value-key": "[RESHAPE_FACTOR]",
      "type": "Number",
      "integer": true,
      "optional": true,
      "id": "reshape_factor",
      "name": "Reshape Slices Factor"
    },
    {
      "command-line-flag": "--reshape3d",
      "description": "Reshape fsaverage (ico7) into 42 x 47 x 83.",
      "value-key": "[RESHAPE3D]",
      "type": "Flag",
      "id": "reshape3d",
      "name": "Reshape 3D Flag"
    },
    {
      "command-line-flag": "--split",
      "description": "Output each frame separately.",
      "value-key": "[SPLIT]",
      "type": "Flag",
      "id": "split",
      "name": "Split Output Flag"
    },
    {
      "command-line-flag": "--synth",
      "description": "Replace input with white Gaussian noise.",
      "value-key": "[SYNTH]",
      "type": "Flag",
      "id": "synth",
      "name": "Synthesize Input Flag"
    },
    {
      "command-line-flag": "--ones",
      "description": "Replace input with 1s.",
      "value-key": "[ONES]",
      "type": "Flag",
      "id": "ones",
      "name": "Replace with Ones Flag"
    },
    {
      "command-line-flag": "--normvar",
      "description": "Rescale so that stddev=1 (good with --synth).",
      "value-key": "[NORMVAR]",
      "type": "Flag",
      "id": "normvar",
      "name": "Normalize Variance Flag"
    },
    {
      "command-line-flag": "--seed",
      "description": "Seed for synth (default is auto).",
      "value-key": "[SEED]",
      "type": "Number",
      "integer": true,
      "optional": true,
      "id": "seed",
      "name": "Synthesize Seed"
    },
    {
      "command-line-flag": "--prune",
      "description": "Remove any voxel that is zero in any time point (for smoothing).",
      "value-key": "[PRUNE]",
      "type": "Flag",
      "id": "prune",
      "name": "Prune Zero Voxels Flag"
    },
    {
      "command-line-flag": "--no-prune",
      "description": "Do not prune (default).",
      "value-key": "[NO_PRUNE]",
      "type": "Flag",
      "id": "no_prune",
      "name": "No Pruning Flag"
    },
    {
      "command-line-flag": "--proj-surf",
      "description": "Project vertices by mag*scale at each vertex.",
      "value-key": "[PROJ_SURF]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "proj_surf",
      "name": "Project Surface"
    },
    {
      "command-line-flag": "--proj-norm",
      "description": "Project vertices by distmm at each vertex.",
      "value-key": "[PROJ_NORM]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "proj_norm",
      "name": "Project Norm"
    },
    {
      "command-line-flag": "--reg-diff",
      "description": "Subtract reg2 from --reg (primarily for testing).",
      "value-key": "[REG_DIFF]",
      "type": "String",
      "optional": true,
      "id": "reg_diff",
      "name": "Register Difference File"
    },
    {
      "command-line-flag": "--rms",
      "description": "Save RMS of reg1-reg2 (primarily for testing).",
      "value-key": "[RMS]",
      "type": "File",
      "optional": true,
      "id": "rms",
      "name": "RMS File"
    },
    {
      "command-line-flag": "--rms-mask",
      "description": "Compute RMS in mask (primarily for testing).",
      "value-key": "[RMS_MASK]",
      "type": "File",
      "optional": true,
      "id": "rms_mask",
      "name": "RMS Mask File"
    }
  ],
  "output-files": [
    {
      "path-template": "[TVAL_PATH]",
      "description": "File in which to store output values.",
      "id": "output_values",
      "name": "Output Values File"
    },
    {
      "path-template": "[TRG_DIST]",
      "description": "File containing distances from source to target vertices.",
      "id": "trg_distances",
      "name": "Target Distances File"
    }
  ],
  "url": "https://github.com/freesurfer/freesurfer"
}
