{
  "name": "run_samseg",
  "description": "SAMSEG (Sequence Adaptive Multimodal SEGmentation) is a tool for automated segmentation of brain MRI data.",
  "command-line": "run_samseg [OUTPUT_DIR] [INPUT_FILES] [INPUT_MODE] [THREADS] [REG_ONLY] [REG_FILE] [INIT_REG_FILE] [ATLAS_DIR] [GMM_FILE] [IGNORE_UNKNOWN] [OPTIONS_FILE] [PALLIDUM_SEPARATE] [MESH_STIFFNESS] [SMOOTH_WM_CORTEX_PRIORS] [BIAS_FIELD_SMOOTHING_KERNEL] [LESION] [THRESHOLD] [SAMPLES] [BURNIN] [LESION_PSEUDO_SAMPLES] [LESION_RHO] [LESION_MASK_STRUCTURE] [LESION_MASK_PATTERN] [RANDOM_SEED] [DISSECTION_PHOTO] [HISTORY] [SAVE_POSTERIORS] [SAVE_PROBABILITIES] [SHOWFIGS] [SAVE_MESH] [SAVE_WARP] [MOVIE]",
  "schema-version": "0.5",
  "inputs": [
    {
      "id": "output_dir",
      "name": "Output Directory",
      "type": "String",
      "value-key": "[OUTPUT_DIR]",
      "description": "Target directory for output.",
      "command-line-flag": "-o",
      "optional": false
    },
    {
      "id": "input_files",
      "name": "Input Image Files",
      "type": "File",
      "value-key": "[INPUT_FILES]",
      "description": "Input image(s) for segmentation.",
      "list": true,
      "command-line-flag": "-i",
      "optional": false
    },
    {
      "id": "input_mode",
      "name": "Input Image Mode",
      "type": "String",
      "value-key": "[INPUT_MODE]",
      "description": "Output basenames for the input image mode.",
      "list": true,
      "command-line-flag": "-m",
      "optional": true
    },
    {
      "id": "threads",
      "name": "Number of Threads",
      "type": "Number",
      "value-key": "[THREADS]",
      "description": "Number of threads to use.",
      "command-line-flag": "--threads",
      "optional": true
    },
    {
      "id": "reg_only",
      "name": "Registration Only",
      "type": "Flag",
      "value-key": "[REG_ONLY]",
      "description": "Only perform initial affine registration.",
      "command-line-flag": "--reg-only"
    },
    {
      "id": "reg_file",
      "name": "Registration File",
      "type": "File",
      "value-key": "[REG_FILE]",
      "description": "Skip initial affine registration and read transform from file.",
      "command-line-flag": "-r",
      "optional": true
    },
    {
      "id": "init_reg_file",
      "name": "Initial Registration File",
      "type": "File",
      "value-key": "[INIT_REG_FILE]",
      "description": "Initial affine registration.",
      "command-line-flag": "--init-reg",
      "optional": true
    },
    {
      "id": "atlas_dir",
      "name": "Atlas Directory",
      "type": "String",
      "value-key": "[ATLAS_DIR]",
      "description": "Point to an alternative atlas directory.",
      "command-line-flag": "-a",
      "optional": true
    },
    {
      "id": "gmm_file",
      "name": "GMM File",
      "type": "File",
      "value-key": "[GMM_FILE]",
      "description": "Point to an alternative GMM file.",
      "command-line-flag": "--gmm",
      "optional": true
    },
    {
      "id": "ignore_unknown",
      "name": "Ignore Unknown",
      "type": "Flag",
      "value-key": "[IGNORE_UNKNOWN]",
      "description": "Ignore final priors corresponding to unknown class.",
      "command-line-flag": "--ignore-unknown"
    },
    {
      "id": "options_file",
      "name": "Options File",
      "type": "File",
      "value-key": "[OPTIONS_FILE]",
      "description": "Override advanced options via a JSON file.",
      "command-line-flag": "--options",
      "optional": true
    },
    {
      "id": "pallidum_separate",
      "name": "Pallidum Separate",
      "type": "Flag",
      "value-key": "[PALLIDUM_SEPARATE]",
      "description": "Move pallidum outside of global white matter class.",
      "command-line-flag": "--pallidum-separate"
    },
    {
      "id": "mesh_stiffness",
      "name": "Mesh Stiffness",
      "type": "Number",
      "value-key": "[MESH_STIFFNESS]",
      "description": "Override mesh stiffness.",
      "command-line-flag": "--mesh-stiffness",
      "optional": true
    },
    {
      "id": "smooth_wm_cortex_priors",
      "name": "Smooth WM Cortex Priors",
      "type": "Number",
      "value-key": "[SMOOTH_WM_CORTEX_PRIORS]",
      "description": "Sigma value to smooth the WM and cortex atlas priors.",
      "command-line-flag": "--smooth-wm-cortex-priors",
      "optional": true
    },
    {
      "id": "bias_field_smoothing_kernel",
      "name": "Bias Field Smoothing Kernel",
      "type": "Number",
      "value-key": "[BIAS_FIELD_SMOOTHING_KERNEL]",
      "description": "Distance in mm of sinc function center to first zero crossing.",
      "command-line-flag": "--bias-field-smoothing-kernel",
      "optional": true
    },
    {
      "id": "lesion",
      "name": "Enable Lesion Segmentation",
      "type": "Flag",
      "value-key": "[LESION]",
      "description": "Enable lesion segmentation (requires tensorflow).",
      "command-line-flag": "--lesion"
    },
    {
      "id": "threshold",
      "name": "Lesion Threshold",
      "type": "Number",
      "value-key": "[THRESHOLD]",
      "description": "Lesion threshold for final segmentation.",
      "command-line-flag": "--threshold",
      "optional": true
    },
    {
      "id": "samples",
      "name": "Number of Samples",
      "type": "Number",
      "value-key": "[SAMPLES]",
      "description": "Number of samples for lesion segmentation.",
      "command-line-flag": "--samples",
      "optional": true
    },
    {
      "id": "burnin",
      "name": "Burn-in Samples",
      "type": "Number",
      "value-key": "[BURNIN]",
      "description": "Number of burn-in samples for lesion segmentation.",
      "command-line-flag": "--burnin",
      "optional": true
    },
    {
      "id": "lesion_pseudo_samples",
      "name": "Lesion Pseudo Samples",
      "type": "Number",
      "value-key": "[LESION_PSEUDO_SAMPLES]",
      "description": "Lesion pseudo samples mean and variance.",
      "command-line-flag": "--lesion-pseudo-samples",
      "optional": true,
      "list": true,
      "min-list-entries": 2,
      "max-list-entries": 2
    },
    {
      "id": "lesion_rho",
      "name": "Lesion Ratio",
      "type": "Number",
      "value-key": "[LESION_RHO]",
      "description": "Lesion ratio.",
      "command-line-flag": "--lesion-rho",
      "optional": true
    },
    {
      "id": "lesion_mask_structure",
      "name": "Lesion Mask Structure",
      "type": "String",
      "value-key": "[LESION_MASK_STRUCTURE]",
      "description": "Intensity mask brain structure.",
      "command-line-flag": "--lesion-mask-structure",
      "optional": true
    },
    {
      "id": "lesion_mask_pattern",
      "name": "Lesion Mask Pattern",
      "type": "Number",
      "value-key": "[LESION_MASK_PATTERN]",
      "description": "Lesion mask pattern for each input volume.",
      "command-line-flag": "--lesion-mask-pattern",
      "optional": true,
      "list": true
    },
    {
      "id": "random_seed",
      "name": "Random Seed",
      "type": "Number",
      "value-key": "[RANDOM_SEED]",
      "description": "Random seed.",
      "command-line-flag": "--random-seed",
      "optional": true
    },
    {
      "id": "dissection_photo",
      "name": "Dissection Photo",
      "type": "String",
      "value-key": "[DISSECTION_PHOTO]",
      "description": "Specify hemispheres: left, right, or both.",
      "command-line-flag": "--dissection-photo",
      "optional": true
    },
    {
      "id": "history",
      "name": "Save History",
      "type": "Flag",
      "value-key": "[HISTORY]",
      "description": "Save history of segmentation.",
      "command-line-flag": "--history"
    },
    {
      "id": "save_posteriors",
      "name": "Save Posteriors",
      "type": "String",
      "value-key": "[SAVE_POSTERIORS]",
      "description": "Save posterior volumes.",
      "command-line-flag": "--save-posteriors",
      "optional": true,
      "list": true
    },
    {
      "id": "save_probabilities",
      "name": "Save Probabilities",
      "type": "Flag",
      "value-key": "[SAVE_PROBABILITIES]",
      "description": "Save modal class probabilities.",
      "command-line-flag": "--save-probabilities"
    },
    {
      "id": "showfigs",
      "name": "Show Figures",
      "type": "Flag",
      "value-key": "[SHOWFIGS]",
      "description": "Show figures during run.",
      "command-line-flag": "--showfigs"
    },
    {
      "id": "save_mesh",
      "name": "Save Mesh",
      "type": "Flag",
      "value-key": "[SAVE_MESH]",
      "description": "Save final mesh in template space.",
      "command-line-flag": "--save-mesh"
    },
    {
      "id": "save_warp",
      "name": "Save Warp",
      "type": "Flag",
      "value-key": "[SAVE_WARP]",
      "description": "Save image->template warp field.",
      "command-line-flag": "--save-warp"
    },
    {
      "id": "movie",
      "name": "Movie Mode",
      "type": "Flag",
      "value-key": "[MOVIE]",
      "description": "Show history as controlled time sequence.",
      "command-line-flag": "--movie"
    }
  ],
  "author": "FreeSurfer Developers",
  "tool-version": "7.4.1",
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "url": "https://github.com/freesurfer/freesurfer"
}
